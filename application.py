import ctypes
import os
import sys

# pylint: disable=E0611
from PyQt5.QtGui import (
    QIcon,
)
from PyQt5.QtWidgets import (
    QApplication,
    QMainWindow,
)

from gpiozero import LED, PWMLED, Button


# warnings.simplefilter("ignore", UserWarning)
# sys.coinit_flags = 2

# Import Ui_MainWindow class from UiMainApp.py generated by uic module
from interface import Ui_MainWindow  # noqa: E402


def exe_path():
    """ Return the path of the executable or of the script. """
    if hasattr(sys, 'frozen'):
        return os.path.dirname(os.path.abspath(sys.executable))
    return os.path.dirname(os.path.abspath(__file__))

# PyInstaller related function


def resource_path(relative_path: str):
    """Get absolute path to resource, works for dev and for PyInstaller.

    Args:
        relative_path: the path to resolve.

    Returns:
        The absolute path to the resource.
    """
    base_path = getattr(
        sys,
        '_MEIPASS',
        os.path.dirname(os.path.abspath(__file__)),
    )

    return os.path.join(base_path, relative_path)


SCRIPT_PATH = exe_path()


class MainApp(QMainWindow, Ui_MainWindow):
    """
    MainApp class inherit from QMainWindow and from
    Ui_MainWindow class in UiMainApp module.
    """
    etat_led = False
    
    # led = LED(17)
    # pwm_led = PWMLED(18)
    # button = Button(4)


    def __init__(self):
        """Constructor or the initialiser."""
        QMainWindow.__init__(self)
        # It is imperative to call self.setupUi (self) to initialise the GUI
        # This is defined in gui_autogenerated_template.py file automatically
        self.setupUi(self)
        self.base_title = 'Exemple d\'interface graphique sur la Raspberry Pi'
        self.setWindowTitle(self.base_title)

        # self.pwm_slider_gpio_18.valueChanged.connect(self.change_led_pwm)
        # self.bouton_gpio_17.clicked.connect(self.toggle_led)
        # self.bouton_gpio_17.pressed.connect(self.led.on)
        # self.bouton_gpio_17.clicked.connect(self.led.off)
        # self.button.when_activated = lambda _: self.led.on()
        # self.button.when_deactivated = lambda _: self.led.off()
    

    def change_led_pwm(self, value):
        self.pwm_led.value = value/100

    # def keyPressEvent(self, event):  # pylint: disable=C0103
    #     """Intercept the key events.
    #     Args:
    #         self: self.
    #         event: the intercepted event.
    #     """
    #     # Close the program
    #     if event.key() == Qt.Key_Escape:
    #         self.close()

    #     # Maximize the window
    #     if event.key() == Qt.Key_F11:
    #         if self.isMaximized():
    #             self.showNormal()
    #         else:
    #             self.showMaximized()

    # def open_documentation(self):
    #     """Open program documentation."""
    #     url = QUrl(
    #         'https://github.com/Vincent-Stragier/'
    #         'deltamed_coherence_openutils/wiki/Anonymiser-GUI'
    #     )
    #     QDesktopServices.openUrl(url)

    # def show_about(self):
    #     """Show the about me."""
    #     msg = QMessageBox()
    #     msg.setWindowTitle('About')
    #     msg.setText(
    #         'This program has been made by Vincent Stragier.\n\n'
    #         'It is PyQt5 code example.'
    #         'The program (PyQt5 GUI) is under a GNU GPL and its '
    #         'source code is in part under a '
    #         'Creative Commons licence.'
    #     )
    #     msg.setStandardButtons(QMessageBox.Ok)
    #     msg.exec_()

    # def show_critical_exception(self, parameters):
    #     """Show generic error."""
    #     msg = QMessageBox()
    #     msg.setWindowTitle(parameters.get('title', 'Unexpected error'))
    #     msg.setIcon(QMessageBox.Critical)

    #     text = parameters.get('text', None)
    #     detailed_text = parameters.get('detailed_text', None)
    #     if text is not None:
    #         msg.setText(text)
    #     if detailed_text is not None:
    #         msg.setDetailedText(detailed_text)
    #     msg.setStandardButtons(QMessageBox.Ok)
    #     return msg.exec_()


if __name__ == '__main__':
    # For Windows set AppID to add an Icon in the taskbar
    # https://stackoverflow.com/questions/1551605/how-to-set-applications-taskbar-icon-in-windows-7
    if sys.platform == 'win32':
        from ctypes import wintypes

        APPID = u'vincent_stragier.electrolab.v1.0.0'  # arbitrary string
        ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID(APPID)

        lp_buffer = wintypes.LPWSTR()
        ctypes.windll.shell32.GetCurrentProcessExplicitAppUserModelID(
            ctypes.cast(ctypes.byref(lp_buffer), wintypes.LPWSTR))
        # appid = lp_buffer.value
        ctypes.windll.kernel32.LocalFree(lp_buffer)

    app = QApplication(sys.argv)
    # Launch the main app.
    MyApplication = MainApp()
    MyApplication.show()  # Show the form
    # os.path.join(os.path.dirname(sys.argv[0]),'..', 'ico', 'fpms.svg')
    icon_path = resource_path('ico/icon.ico')
    app.setWindowIcon(QIcon(icon_path))
    MyApplication.setWindowIcon(QIcon(icon_path))
    sys.exit(app.exec_())  # Execute the app
